package org.ivy.settlement.relay.watchdog.contract;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.*;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.11.1.
 */
@SuppressWarnings("rawtypes")
public class LivenessManager extends Contract {
    public static final String BINARY = "60e060405234801561000f575f80fd5b5060405161356d38038061356d83398101604081905261002e91610066565b6001600160a01b0392831660805290821660a0521660c0526100a6565b80516001600160a01b0381168114610061575f80fd5b919050565b5f805f60608486031215610078575f80fd5b6100818461004b565b925061008f6020850161004b565b915061009d6040850161004b565b90509250925092565b60805160a05160c05161341261015b5f395f818161018f0152818161065b0152818161141f015281816117a90152611a9b01525f818160f9015281816108b2015261106101525f818161029c015281816103730152818161048f01528181610c3401528181610d8d0152818161136401528181611ac501528181611d6601528181612064015281816121a101528181612233015281816126f6015281816128510152818161294e0152612b1f01526134125ff3fe6080604052600436106100e4575f3560e01c80637579477a11610087578063c01d385311610057578063c01d3853146102be578063c428937c146102d1578063d7f8fb9f146102f0578063f463e8531461030f575f80fd5b80637579477a1461020e578063819fab7f1461022d57806397b529161461026c578063a380a7191461028b575f80fd5b80633a46fa17116100c25780633a46fa171461017e5780633f5d3e0b146101b1578063502e0355146101d057806351e41700146101ef575f80fd5b8063023a96fe146100e85780631bab58f51461013857806332ca48fe14610169575b5f80fd5b3480156100f3575f80fd5b5061011b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b348015610143575f80fd5b50610157610152366004612c21565b61036f565b60405160ff909116815260200161012f565b61017c610177366004612d3b565b61048d565b005b348015610189575f80fd5b5061011b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101bc575f80fd5b5061017c6101cb366004612d95565b6108a7565b3480156101db575f80fd5b5061017c6101ea366004612e95565b610988565b3480156101fa575f80fd5b5061017c610209366004612c21565b6111c8565b348015610219575f80fd5b5061017c610228366004612ee9565b61147a565b348015610238575f80fd5b5061024c610247366004612f17565b611586565b6040805161ffff909416845260208401929092529082015260600161012f565b348015610277575f80fd5b50610157610286366004612ee9565b611614565b348015610296575f80fd5b5061011b7f000000000000000000000000000000000000000000000000000000000000000081565b61017c6102cc366004612fa1565b611640565b3480156102dc575f80fd5b5061017c6102eb366004613082565b611d19565b3480156102fb575f80fd5b5061017c61030a366004612d3b565b612061565b34801561031a575f80fd5b5061032e610329366004612f17565b6124dc565b60405161012f91905f60a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633a4c79426040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103cd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103f1919061315b565b60405163229bb82360e01b81526001600160a01b0385811660048301529192509082169063229bb82390602401602060405180830381865afa158015610439573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061045d9190613176565b91508160ff165f03610487576001600160a01b0383165f9081526001602052604090205460ff1691505b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633a4c79426040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061050d919061315b565b60405163229bb82360e01b81523360048201526001600160a01b03919091169063229bb82390602401602060405180830381865afa158015610551573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105759190613176565b60ff16156105be5760405162461bcd60e51b81526020600482015260116024820152704f6e6c79204f757473696465204e6f646560781b60448201526064015b60405180910390fd5b335f9081526001602052604081205460ff1690036106b357600534101561061e5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d0811195c1bdcda5d60621b60448201526064016105b5565b335f81815260016020819052604091829020805460ff191682178155349101555163d3fb3b4160e01b815260048101919091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d3fb3b41906024015f604051808303815f87803b15801561069c575f80fd5b505af11580156106ae573d5f803e3d5ffd5b505050505b5f5b81518110156108a3575f8282815181106106d1576106d1613196565b6020908102919091018101515f8181529182905260409091206007015490915060ff166001146107355760405162461bcd60e51b815260206004820152600f60248201526e10db185a5b48139bdd08115e1a5cdd608a1b60448201526064016105b5565b5f81815260026020908152604080832033845290915290205460ff16156107925760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e48125b9d9bdb1bdd9959607a1b60448201526064016105b5565b61079e601460076131be565b5f828152602081905260409020600801546107b990436131d5565b106107f85760405162461bcd60e51b815260206004820152600f60248201526e1059d85a5b9cdd08151a5b595bdd5d608a1b60448201526064016105b5565b5f8181526002602081815260408084203385528252808420805460ff1916600190811790915580835281852090930180548085018255908552828520018590558484529083905282206004018054919290916108559084906131e8565b9091555050604080513381526020810183905260018183015290517f49c62b38330dcee4521d236c6cf51a3cbcca47f9819c24f5063f96778edeea8b9181900360600190a1506001016106b5565b5050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461091f5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79204368616c6c656e67654d616e616765722043616e2041636365737360448201526064016105b5565b61092b84848484612558565b604080516001600160a01b038581168252841660208201528215158183015290516001600160401b038616917f4502f7254c6e0374b699285f6d661f136947eeccf6ce7734753f1c4221cd1b1d919081900360600190a250505050565b604080516080810182525f8082526020820181905291810182905260608101919091525f8481526020819052604090206007015460ff16600114610a005760405162461bcd60e51b815260206004820152600f60248201526e10db185a5b48139bdd08115e1a5cdd608a1b60448201526064016105b5565b838152610a0c3361036f565b60ff16600114610a535760405162461bcd60e51b8152602060048201526012602482015271526571756573746572204e6f742049646c6560701b60448201526064016105b5565b5f848152600260209081526040808320338452909152902054600160ff90911611801590610aa557505f8481526002602081815260408084206001600160a01b03881685529091529091205460ff1610155b15610ac4576001600160a01b0383166020820152336040820152610b6f565b5f8481526002602090815260408083206001600160a01b0387168452909152902054600160ff90911611801590610b1657505f8481526002602081815260408084203385529091529091205460ff1610155b15610b35573360208201526001600160a01b0383166040820152610b6f565b60405162461bcd60e51b815260206004820152600f60248201526e2bb937b7339020b3b0b4b739ba32b960891b60448201526064016105b5565b5f610b798461036f565b5f8681526003602090815260408083206001600160a01b038916845290915290205490915060ff16158015610bb157508060ff166003145b15610bcc57610bc585858460400151612a54565b5050505050565b8060ff16600114610c145760405162461bcd60e51b8152602060048201526012602482015271416761696e73746572204e6f742049646c6560701b60448201526064016105b5565b50604080516060810182525f80825260208201819052918101919091525f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632d5e3f056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c8e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cb2919061315b565b5f8781526020819052604090819020549051631091ef6b60e11b815261ffff90911660048201529091506001600160a01b03821690632123ded690602401602060405180830381865afa158015610d0b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d2f91906131fb565b610d6d5760405162461bcd60e51b815260206004820152600f60248201526e556e6368616c6c656e676561626c6560881b60448201526064016105b5565b835115610eb75783516040516384e4232760e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906384e4232790602401602060405180830381865afa158015610dda573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dfe91906131fb565b610e405760405162461bcd60e51b8152602060048201526013602482015272109b1bd8dac8139bdd0810dbdb5b5a5d1d1959606a1b60448201526064016105b5565b83516020850151604051634a71047760e11b81526001600160a01b038416926394e208ee92610e7192600401613216565b606060405180830381865afa158015610e8c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eb09190613252565b9150610f48565b5f868152602081905260409081902054905163138b16d560e01b815261ffff82166004820152620100009091046001600160401b031660248201526001600160a01b0382169063138b16d590604401606060405180830381865afa158015610f21573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f459190613252565b91505b50604080518082019091525f8082526020820152604080518082019091525f808252602082015282515f8881526020819052604090205461ffff908116911614610fc95760405162461bcd60e51b8152602060048201526012602482015271086d0c2d2dc4092c8409cdee8409ac2e8c6d60731b60448201526064016105b5565b50506040805180820182526020838101516001600160401b0390811683528484015182840152835180850185525f8a81528084528581208054620100008104909416835260010154828501528a815280845285518087018752888501516001600160a01b0390811682528988015181168287015287518089018952878152958601849052965163044b730360e41b81529596929591947f0000000000000000000000000000000000000000000000000000000000000000909316936344b73030936110a19361ffff90921692913091906004016132bc565b6020604051808303815f875af11580156110bd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110e19190613350565b90506110f285602001516002612acd565b5061110285604001516002612acd565b50600160608681018281526001600160401b0384165f818152600460209081526040918290208b518155818c015196810180546001600160a01b039889166001600160a01b03199091168117909155838d015160029092018054965160ff16600160a01b026001600160a81b0319909716929098169182179590951790965581518e8152908101939093528201939093527f1bb4301959a52b75b9a6a6307e719fe204407ffe0d91772b9279ae4794eae40f910160405180910390a25050505050505050565b6111d13361036f565b60ff166001146112145760405162461bcd60e51b815260206004820152600e60248201526d14995c5d595cdd195c881119585960921b60448201526064016105b5565b335f90815260016020819052604090912001546112605760405162461bcd60e51b815260206004820152600a602482015269139bc811195c1bdcda5d60b21b60448201526064016105b5565b335f908152600160209081526040808320600201805482518185028101850190935280835291929091908301828280156112b757602002820191905f5260205f20905b8154815260200190600101908083116112a3575b505050505090505f5b815181101561134c575f8282815181106112dc576112dc613196565b6020908102919091018101515f81815291829052604090912060070154909150600160ff909116116113435760405162461bcd60e51b815260206004820152601060248201526f436c61696d204e6f7420536574746c6560801b60448201526064016105b5565b506001016112c0565b506040516317b4d5b960e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bda6adc8906113a1906002903390879060649060040161336b565b6020604051808303815f875af11580156113bd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113e19190613398565b50335f818152600160208190526040808320805460ff1916815590910191909155516329a900b760e11b815260048101919091526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635352016e906024015f604051808303815f87803b158015611460575f80fd5b505af1158015611472573d5f803e3d5ffd5b505050505050565b6114833361036f565b60ff166001146114c65760405162461bcd60e51b815260206004820152600e60248201526d14995c5d595cdd195c881119585960921b60448201526064016105b5565b5f82815260208190526040902060070154600160ff9091161161151e5760405162461bcd60e51b815260206004820152601060248201526f436c61696d204e6f7420536574746c6560801b60448201526064016105b5565b5f8281526005602090815260408083203384529091528082205490516001600160a01b0384169282156108fc02929190818181858888f19350505050158015611569573d5f803e3d5ffd5b50505f908152600560209081526040808320338452909152812055565b5f818152602081905260408120600701548190819060ff166003146115e35760405162461bcd60e51b815260206004820152601360248201527210db185a5b48139bdd0810dbdb5b5a5d1d1959606a1b60448201526064016105b5565b5050505f908152602081905260409020805460019091015461ffff821692620100009092046001600160401b031691565b5f8281526002602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b81518351148015611652575080518251145b61168d5760405162461bcd60e51b815260206004820152600c60248201526b57726f6e6720696e7075747360a01b60448201526064016105b5565b5f6116973361036f565b90508060ff166003036116e55760405162461bcd60e51b8152602060048201526016602482015275526571756573746572204465616420416c726561647960501b60448201526064016105b5565b5f8160ff166004146116f85760026116fb565b60035b335f9081526001602052604081205491925060ff9091169003611826578160ff165f0361180957600534101561176a5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d0811195c1bdcda5d60621b60448201526064016105b5565b335f818152600160208190526040918290203481830155805460ff191690911790555163d3fb3b4160e01b815260048101919091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d3fb3b41906024015f604051808303815f87803b1580156117ea575f80fd5b505af11580156117fc573d5f803e3d5ffd5b5050505060029050611826565b50335f908152600160205260409020805460ff1916600417905560035b5f5b8551811015611472575f86828151811061184457611844613196565b602002602001015186838151811061185e5761185e613196565b602002602001015186848151811061187857611878613196565b60200260200101516040516020016118bf9392919060f09390931b6001600160f01b031916835260c09190911b6001600160c01b0319166002830152600a820152602a0190565b60408051601f1981840301815291815281516020928301205f81815292839052912060070154909150600160ff90911611156119345760405162461bcd60e51b815260206004820152601460248201527310db185a5b4810db1bdcd9590bd4d95d1d1b195960621b60448201526064016105b5565b5f81815260026020908152604080832033845290915290205460ff16156119915760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e48125b9d9bdb1bdd9959607a1b60448201526064016105b5565b5f8181526020819052604081206007015460ff169003611c345760405180606001604052808884815181106119c8576119c8613196565b602002602001015161ffff1681526020018784815181106119eb576119eb613196565b60200260200101516001600160401b03168152602001868481518110611a1357611a13613196565b6020908102919091018101519091525f83815280825260409081902083518154938501516001600160401b0316620100000269ffffffffffffffffffff1990941661ffff909116179290921782559182015160018083019190915560078201805460ff1916909117905543600890910181905590516202cb0d60eb1b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692637a02a015927f000000000000000000000000000000000000000000000000000000000000000090921691631658680091611afe9160040190815260200190565b602060405180830381865afa158015611b19573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b3d9190613398565b6040518263ffffffff1660e01b8152600401611b5b91815260200190565b5f604051808303815f87803b158015611b72575f80fd5b505af1158015611b84573d5f803e3d5ffd5b505050507f5c9af78d4d4ecf6bafa708acc5147dc1c0cc599b92b8fc077f1814cd80d4d68881888481518110611bbc57611bbc613196565b6020026020010151888581518110611bd657611bd6613196565b6020026020010151888681518110611bf057611bf0613196565b6020026020010151604051611c2b949392919093845261ffff9290921660208401526001600160401b03166040830152606082015260800190565b60405180910390a15b335f9081526001602081815260408320600290810180549384018155845292200182905560ff84169003611c88575f818152602081905260408120600201805491611c7e836133af565b9190505550611caa565b5f818152602081905260408120600301805491611ca4836133af565b91905055505b5f8181526002602090815260408083203380855290835292819020805460ff191660ff881690811790915581519384529183018490528201527f49c62b38330dcee4521d236c6cf51a3cbcca47f9819c24f5063f96778edeea8b9060600160405180910390a150600101611828565b8051825114611d635760405162461bcd60e51b8152602060048201526016602482015275092dce0eae84098cadccee8d0409cdee8409ac2e8c6d60531b60448201526064016105b5565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632d5e3f056040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dc0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611de4919061315b565b90505f5b835181101561205b575f848281518110611e0457611e04613196565b602002602001015190505f848381518110611e2157611e21613196565b6020908102919091018101515f8181529182905260409091206007015490915060ff16600114611e935760405162461bcd60e51b815260206004820152601c60248201527f436c61696d20416c726561647920436c6f7365642f536574746c65640000000060448201526064016105b5565b81516020830151604051634a71047760e11b81525f926001600160a01b038816926394e208ee92611ec8929190600401613216565b606060405180830381865afa158015611ee3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f079190613252565b5f83815260208190526040902054815191925061ffff918216911614611f645760405162461bcd60e51b8152602060048201526012602482015271086d0c2d2dc4092c8409cdee8409ac2e8c6d60731b60448201526064016105b5565b5f8281526020818152604090912054908201516001600160401b03908116620100009092041614611fca5760405162461bcd60e51b815260206004820152601060248201526f090cad2ced0e8409cdee8409ac2e8c6d60831b60448201526064016105b5565b5f828152602081905260409020600701805460ff1916600217905585517f05290ff7ec91717adeaf88bc52fd3aa28dae516f9d63b770d8e02b42f2aeec7b9087908690811061201b5761201b613196565b6020908102919091018101515f85815280835260409081902060070154815192835260ff16928201929092520160405180910390a1505050600101611de8565b50505050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633a4c79426040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120be573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120e2919061315b565b90505f5b82518110156124d7575f83828151811061210257612102613196565b602002602001015190506014600761211a91906131be565b5f8281526020819052604090206008015461213590436131d5565b1161217a5760405162461bcd60e51b815260206004820152601560248201527424b71021b430b63632b733b290223ab930ba34b7b760591b60448201526064016105b5565b5f818152602081905260408082206008015490516202cb0d60eb1b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631658680090602401602060405180830381865afa1580156121ee573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122129190613398565b6040516202cb0d60eb1b81524360048201529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631658680090602401602060405180830381865afa158015612278573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061229c9190613398565b6040516378a0599960e11b8152600481018290529091505f906001600160a01b0387169063f140b33290602401602060405180830381865afa1580156122e4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123089190613398565b604051632ac52d9560e01b8152600481018590529091505f906001600160a01b03881690632ac52d9590602401602060405180830381865afa158015612350573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123749190613398565b90505f61238182846131d5565b5f878152602081905260409020600581015460048201546006830154600284015460039094015494955091939092906123ba86856131e8565b85036123e0575f8b8152602081905260409020600701805460ff19166003179055612458565b6123ea81836131e8565b8303612410575f8b8152602081905260409020600701805460ff19166004179055612458565b60405162461bcd60e51b815260206004820152601860248201527f526571756972656d656e747320556e736174697366696564000000000000000060448201526064016105b5565b7f05290ff7ec91717adeaf88bc52fd3aa28dae516f9d63b770d8e02b42f2aeec7b8e8d8151811061248b5761248b613196565b6020908102919091018101515f8e815280835260409081902060070154815192835260ff16928201929092520160405180910390a15050600190990198506120e6975050505050505050565b505050565b6125096040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b505f9081526020818152604091829020825160a0810184526002820154815260038201549281019290925260048101549282019290925260058201546060820152600690910154608082015290565b6001600160401b0384165f90815260046020526040902060020154600160a01b900460ff166001146125c45760405162461bcd60e51b815260206004820152601560248201527457726f6e67204368616c6c656e676520537461746560581b60448201526064016105b5565b6001600160401b0384165f908152600460205260409020546125e58461036f565b60ff16600214801561260257506125fb8361036f565b60ff166002145b801561263057505f8181526003602090815260408083206001600160a01b038716845290915290205460ff16155b61266f5760405162461bcd60e51b815260206004820152601060248201526f57726f6e67204e6f646520537461746560801b60448201526064016105b5565b6001600160401b0385165f5260046020528115612931576001600160401b0385165f908152600460205260409020600201546126b5906001600160a01b03166001612acd565b506001600160401b0385165f9081526004602081815260408084206001908101546001600160a01b031685529091529091205460ff169081900361281c575f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633a4c79426040518163ffffffff1660e01b8152600401602060405180830381865afa158015612750573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612774919061315b565b6001600160401b0388165f9081526004602081905260409182902060019081015492516338510b8160e01b81526001600160a01b039384169281019290925260248201529192508216906338510b81906044015f604051808303815f87803b1580156127de575f80fd5b505af11580156127f0573d5f803e3d5ffd5b5050505f8481526020819052604081206003018054925090612811836133c7565b9190505550506128f3565b6001600160401b0386165f908152600460208190526040918290206001015491516317b4d5b960e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363bda6adc89361289093600293929092169182916064910161336b565b6020604051808303815f875af11580156128ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128d09190613398565b505f8281526020819052604081206002018054916128ed836133c7565b91905055505b506001600160401b0385165f9081526004602090815260408083206001908101546001600160a01b031684529091529020805460ff19169055610bc5565b61293c846001612acd565b505f612949846003612acd565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bda6adc883878960326040518563ffffffff1660e01b815260040161299f949392919061336b565b6020604051808303815f875af11580156129bb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129df9190613398565b5f8481526005602090815260408083206001600160a01b038b168452909152812080549293508392909190612a159084906131e8565b90915550506001600160401b0387165f90815260046020526040902060020154612a4b90849087906001600160a01b0316612a54565b50505050505050565b5f8381526003602090815260408083206001600160a01b03808716808652919093529220805460ff1916600117905582169003612ab1575f838152602081905260408120600501805491612aa7836133af565b9190505550505050565b5f838152602081905260408120600601805491612aa7836133af565b6001600160a01b0382165f9081526001602052604081205460ff16600414612b1c57506001600160a01b0382165f908152600160208190526040909120805460ff191660ff841617905561163a565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633a4c79426040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b79573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b9d919061315b565b6040516338510b8160e01b81526001600160a01b03868116600483015260ff86166024830152919250908216906338510b81906044015f604051808303815f87803b158015612bea575f80fd5b505af1158015612bfc573d5f803e3d5ffd5b506002979650505050505050565b6001600160a01b0381168114612c1e575f80fd5b50565b5f60208284031215612c31575f80fd5b8135612c3c81612c0a565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b0381118282101715612c7957612c79612c43565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612ca757612ca7612c43565b604052919050565b5f6001600160401b03821115612cc757612cc7612c43565b5060051b60200190565b5f82601f830112612ce0575f80fd5b8135612cf3612cee82612caf565b612c7f565b8082825260208201915060208360051b860101925085831115612d14575f80fd5b602085015b83811015612d31578035835260209283019201612d19565b5095945050505050565b5f60208284031215612d4b575f80fd5b81356001600160401b03811115612d60575f80fd5b612d6c84828501612cd1565b949350505050565b6001600160401b0381168114612c1e575f80fd5b8015158114612c1e575f80fd5b5f805f8060808587031215612da8575f80fd5b8435612db381612d74565b93506020850135612dc381612c0a565b92506040850135612dd381612c0a565b91506060850135612de381612d88565b939692955090935050565b5f60408284031215612dfe575f80fd5b612e06612c57565b90508135815260208201356001600160401b03811115612e24575f80fd5b8201601f81018413612e34575f80fd5b80356001600160401b03811115612e4d57612e4d612c43565b612e60601f8201601f1916602001612c7f565b818152856020838501011115612e74575f80fd5b816020840160208301375f6020838301015280602085015250505092915050565b5f805f60608486031215612ea7575f80fd5b833592506020840135612eb981612c0a565b915060408401356001600160401b03811115612ed3575f80fd5b612edf86828701612dee565b9150509250925092565b5f8060408385031215612efa575f80fd5b823591506020830135612f0c81612c0a565b809150509250929050565b5f60208284031215612f27575f80fd5b5035919050565b61ffff81168114612c1e575f80fd5b5f82601f830112612f4c575f80fd5b8135612f5a612cee82612caf565b8082825260208201915060208360051b860101925085831115612f7b575f80fd5b602085015b83811015612d31578035612f9381612d74565b835260209283019201612f80565b5f805f60608486031215612fb3575f80fd5b83356001600160401b03811115612fc8575f80fd5b8401601f81018613612fd8575f80fd5b8035612fe6612cee82612caf565b8082825260208201915060208360051b850101925088831115613007575f80fd5b6020840193505b8284101561303257833561302181612f2e565b82526020938401939091019061300e565b955050505060208401356001600160401b0381111561304f575f80fd5b61305b86828701612f3d565b92505060408401356001600160401b03811115613076575f80fd5b612edf86828701612cd1565b5f8060408385031215613093575f80fd5b82356001600160401b038111156130a8575f80fd5b8301601f810185136130b8575f80fd5b80356130c6612cee82612caf565b8082825260208201915060208360051b8501019250878311156130e7575f80fd5b602084015b838110156131275780356001600160401b03811115613109575f80fd5b6131188a602083890101612dee565b845250602092830192016130ec565b50945050505060208301356001600160401b03811115613145575f80fd5b61315185828601612cd1565b9150509250929050565b5f6020828403121561316b575f80fd5b8151612c3c81612c0a565b5f60208284031215613186575f80fd5b815160ff81168114612c3c575f80fd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761163a5761163a6131aa565b8181038181111561163a5761163a6131aa565b8082018082111561163a5761163a6131aa565b5f6020828403121561320b575f80fd5b8151612c3c81612d88565b828152604060208201525f82518060408401528060208501606085015e5f606082850101526060601f19601f8301168401019150509392505050565b5f6060828403128015613263575f80fd5b50604051606081016001600160401b038111828210171561328657613286612c43565b604052825161329481612f2e565b815260208301516132a481612d74565b60208201526040928301519281019290925250919050565b61ffff85168152610100810160208201855f5b60028110156132f75781516001600160a01b03168352602092830192909101906001016132cf565b5050506001600160a01b038416606083015260808201835f5b600281101561334457815180516001600160401b031684526020908101518185015260409093019290910190600101613310565b50505095945050505050565b5f60208284031215613360575f80fd5b8151612c3c81612d74565b60ff94851681526001600160a01b0393841660208201529190921660408201529116606082015260800190565b5f602082840312156133a8575f80fd5b5051919050565b5f600182016133c0576133c06131aa565b5060010190565b5f816133d5576133d56131aa565b505f19019056fea264697066735822122074b68802584c429c6fdb3499f785078389b948aa3acf2e6b509fa4143a4a62a364736f6c634300081a0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_AGAINSTCLAIMS = "againstClaims";

    public static final String FUNC_CHALLENGEMANAGER = "challengeManager";

    public static final String FUNC_CLAIM = "claim";

    public static final String FUNC_CLOSECLAIMS = "closeClaims";

    public static final String FUNC_EPOCHLOCK = "epochLock";

    public static final String FUNC_GETCLAIMCOUNTER = "getClaimCounter";

    public static final String FUNC_GETCOMMITTEDCLAIM = "getCommittedClaim";

    public static final String FUNC_GETINVOLVEDIDENTITY = "getInvolvedIdentity";

    public static final String FUNC_GETSTATE = "getState";

    public static final String FUNC_NETWORKMANAGER = "networkManager";

    public static final String FUNC_REQUESTCHALLENGE = "requestChallenge";

    public static final String FUNC_SETTLECHALLENGE = "settleChallenge";

    public static final String FUNC_SETTLECLAIMS = "settleClaims";

    public static final String FUNC_SETTLEREWARD = "settleReward";

    public static final String FUNC_WITHDRAWDEPOSIT = "withdrawDeposit";

    public static final Event CHALLENGEREQUESTED_EVENT = new Event("ChallengeRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGESETTLED_EVENT = new Event("ChallengeSettled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event CLAIMSETTLED_EVENT = new Event("ClaimSettled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event NEWCLAIM_EVENT = new Event("NewClaim", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint64>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event NEWINVOLVED_EVENT = new Event("NewInvolved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}));
    ;

    @Deprecated
    protected LivenessManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LivenessManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LivenessManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LivenessManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ChallengeRequestedEventResponse> getChallengeRequestedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CHALLENGEREQUESTED_EVENT, transactionReceipt);
        ArrayList<ChallengeRequestedEventResponse> responses = new ArrayList<ChallengeRequestedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ChallengeRequestedEventResponse typedResponse = new ChallengeRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.challengeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.defender = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ChallengeRequestedEventResponse getChallengeRequestedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CHALLENGEREQUESTED_EVENT, log);
        ChallengeRequestedEventResponse typedResponse = new ChallengeRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.challengeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.defender = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ChallengeRequestedEventResponse> challengeRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getChallengeRequestedEventFromLog(log));
    }

    public Flowable<ChallengeRequestedEventResponse> challengeRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGEREQUESTED_EVENT));
        return challengeRequestedEventFlowable(filter);
    }

    public static List<ChallengeSettledEventResponse> getChallengeSettledEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CHALLENGESETTLED_EVENT, transactionReceipt);
        ArrayList<ChallengeSettledEventResponse> responses = new ArrayList<ChallengeSettledEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ChallengeSettledEventResponse typedResponse = new ChallengeSettledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.challengeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.winner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.loser = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.bothWin = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ChallengeSettledEventResponse getChallengeSettledEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CHALLENGESETTLED_EVENT, log);
        ChallengeSettledEventResponse typedResponse = new ChallengeSettledEventResponse();
        typedResponse.log = log;
        typedResponse.challengeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.winner = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.loser = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.bothWin = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ChallengeSettledEventResponse> challengeSettledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getChallengeSettledEventFromLog(log));
    }

    public Flowable<ChallengeSettledEventResponse> challengeSettledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESETTLED_EVENT));
        return challengeSettledEventFlowable(filter);
    }

    public static List<ClaimSettledEventResponse> getClaimSettledEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CLAIMSETTLED_EVENT, transactionReceipt);
        ArrayList<ClaimSettledEventResponse> responses = new ArrayList<ClaimSettledEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ClaimSettledEventResponse typedResponse = new ClaimSettledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.finnalState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ClaimSettledEventResponse getClaimSettledEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CLAIMSETTLED_EVENT, log);
        ClaimSettledEventResponse typedResponse = new ClaimSettledEventResponse();
        typedResponse.log = log;
        typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.finnalState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ClaimSettledEventResponse> claimSettledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getClaimSettledEventFromLog(log));
    }

    public Flowable<ClaimSettledEventResponse> claimSettledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLAIMSETTLED_EVENT));
        return claimSettledEventFlowable(filter);
    }

    public static List<NewClaimEventResponse> getNewClaimEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(NEWCLAIM_EVENT, transactionReceipt);
        ArrayList<NewClaimEventResponse> responses = new ArrayList<NewClaimEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewClaimEventResponse typedResponse = new NewClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.chainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.height = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.hashVal = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static NewClaimEventResponse getNewClaimEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(NEWCLAIM_EVENT, log);
        NewClaimEventResponse typedResponse = new NewClaimEventResponse();
        typedResponse.log = log;
        typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.chainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.height = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.hashVal = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<NewClaimEventResponse> newClaimEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getNewClaimEventFromLog(log));
    }

    public Flowable<NewClaimEventResponse> newClaimEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWCLAIM_EVENT));
        return newClaimEventFlowable(filter);
    }

    public static List<NewInvolvedEventResponse> getNewInvolvedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(NEWINVOLVED_EVENT, transactionReceipt);
        ArrayList<NewInvolvedEventResponse> responses = new ArrayList<NewInvolvedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewInvolvedEventResponse typedResponse = new NewInvolvedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.identity = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static NewInvolvedEventResponse getNewInvolvedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(NEWINVOLVED_EVENT, log);
        NewInvolvedEventResponse typedResponse = new NewInvolvedEventResponse();
        typedResponse.log = log;
        typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.claimId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.identity = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<NewInvolvedEventResponse> newInvolvedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getNewInvolvedEventFromLog(log));
    }

    public Flowable<NewInvolvedEventResponse> newInvolvedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWINVOLVED_EVENT));
        return newInvolvedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> againstClaims(List<byte[]> _claimIds, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_AGAINSTCLAIMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_claimIds, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> challengeManager() {
        final Function function = new Function(FUNC_CHALLENGEMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> claim(List<BigInteger> _chainIds, List<BigInteger> _heights, List<byte[]> _hashVals, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_CLAIM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Uint16>(
                        Uint16.class,
                        org.web3j.abi.Utils.typeMap(_chainIds, Uint16.class)),
                new org.web3j.abi.datatypes.DynamicArray<Uint64>(
                        Uint64.class,
                        org.web3j.abi.Utils.typeMap(_heights, Uint64.class)),
                new org.web3j.abi.datatypes.DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_hashVals, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> closeClaims(List<UploadedHeader> _uploadeds, List<byte[]> _claimIds) {
        final Function function = new Function(
                FUNC_CLOSECLAIMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<UploadedHeader>(UploadedHeader.class, _uploadeds), 
                new org.web3j.abi.datatypes.DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_claimIds, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> epochLock() {
        final Function function = new Function(FUNC_EPOCHLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<InvolvedCounter> getClaimCounter(byte[] _claimId) {
        final Function function = new Function(FUNC_GETCLAIMCOUNTER, 
                Arrays.<Type>asList(new Bytes32(_claimId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<InvolvedCounter>() {}));
        return executeRemoteCallSingleValueReturn(function, InvolvedCounter.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, byte[]>> getCommittedClaim(byte[] _claimId) {
        final Function function = new Function(FUNC_GETCOMMITTEDCLAIM, 
                Arrays.<Type>asList(new Bytes32(_claimId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, byte[]>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, byte[]>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, byte[]>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getInvolvedIdentity(byte[] _claimId, String _node) {
        final Function function = new Function(FUNC_GETINVOLVEDIDENTITY, 
                Arrays.<Type>asList(new Bytes32(_claimId),
                new Address(160, _node)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getState(String _node) {
        final Function function = new Function(FUNC_GETSTATE, 
                Arrays.<Type>asList(new Address(160, _node)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> networkManager() {
        final Function function = new Function(FUNC_NETWORKMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> requestChallenge(byte[] _claimId, String _againster, UploadedHeader _committed) {
        final Function function = new Function(
                FUNC_REQUESTCHALLENGE, 
                Arrays.<Type>asList(new Bytes32(_claimId),
                new Address(160, _againster),
                _committed), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> settleChallenge(BigInteger challengeIndex, String winner, String loser, Boolean bothWin) {
        final Function function = new Function(
                FUNC_SETTLECHALLENGE, 
                Arrays.<Type>asList(new Uint64(challengeIndex),
                new Address(160, winner),
                new Address(160, loser),
                new Bool(bothWin)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> settleClaims(List<byte[]> _claimIds) {
        final Function function = new Function(
                FUNC_SETTLECLAIMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_claimIds, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> settleReward(byte[] _claimId, String _to) {
        final Function function = new Function(
                FUNC_SETTLEREWARD, 
                Arrays.<Type>asList(new Bytes32(_claimId),
                new Address(160, _to)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawDeposit(String _to) {
        final Function function = new Function(
                FUNC_WITHDRAWDEPOSIT, 
                Arrays.<Type>asList(new Address(160, _to)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static LivenessManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LivenessManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LivenessManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LivenessManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LivenessManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new LivenessManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LivenessManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new LivenessManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<LivenessManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _networkManager, String _challengeManager, String _epochLock) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _networkManager),
                new Address(160, _challengeManager),
                new Address(160, _epochLock)));
        return deployRemoteCall(LivenessManager.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<LivenessManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _networkManager, String _challengeManager, String _epochLock) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _networkManager),
                new Address(160, _challengeManager),
                new Address(160, _epochLock)));
        return deployRemoteCall(LivenessManager.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<LivenessManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _networkManager, String _challengeManager, String _epochLock) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _networkManager),
                new Address(160, _challengeManager),
                new Address(160, _epochLock)));
        return deployRemoteCall(LivenessManager.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<LivenessManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _networkManager, String _challengeManager, String _epochLock) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _networkManager),
                new Address(160, _challengeManager),
                new Address(160, _epochLock)));
        return deployRemoteCall(LivenessManager.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class UploadedHeader extends DynamicStruct {
        public BigInteger ivyHeight;

        public byte[] proof;

        public UploadedHeader(BigInteger ivyHeight, byte[] proof) {
            super(new Uint256(ivyHeight),
                    new DynamicBytes(proof));
            this.ivyHeight = ivyHeight;
            this.proof = proof;
        }

        public UploadedHeader(Uint256 ivyHeight, DynamicBytes proof) {
            super(ivyHeight, proof);
            this.ivyHeight = ivyHeight.getValue();
            this.proof = proof.getValue();
        }
    }

    public static class InvolvedCounter extends StaticStruct {
        public BigInteger outsideChallengerCount;

        public BigInteger insideChallengerCount;

        public BigInteger outsideDefenderCount;

        public BigInteger deadDefenderCount;

        public BigInteger deadChallengerCount;

        public InvolvedCounter(BigInteger outsideChallengerCount, BigInteger insideChallengerCount, BigInteger outsideDefenderCount, BigInteger deadDefenderCount, BigInteger deadChallengerCount) {
            super(new Uint256(outsideChallengerCount),
                    new Uint256(insideChallengerCount),
                    new Uint256(outsideDefenderCount),
                    new Uint256(deadDefenderCount),
                    new Uint256(deadChallengerCount));
            this.outsideChallengerCount = outsideChallengerCount;
            this.insideChallengerCount = insideChallengerCount;
            this.outsideDefenderCount = outsideDefenderCount;
            this.deadDefenderCount = deadDefenderCount;
            this.deadChallengerCount = deadChallengerCount;
        }

        public InvolvedCounter(Uint256 outsideChallengerCount, Uint256 insideChallengerCount, Uint256 outsideDefenderCount, Uint256 deadDefenderCount, Uint256 deadChallengerCount) {
            super(outsideChallengerCount, insideChallengerCount, outsideDefenderCount, deadDefenderCount, deadChallengerCount);
            this.outsideChallengerCount = outsideChallengerCount.getValue();
            this.insideChallengerCount = insideChallengerCount.getValue();
            this.outsideDefenderCount = outsideDefenderCount.getValue();
            this.deadDefenderCount = deadDefenderCount.getValue();
            this.deadChallengerCount = deadChallengerCount.getValue();
        }
    }

    public static class ChallengeRequestedEventResponse extends BaseEventResponse {
        public BigInteger challengeId;

        public byte[] claimId;

        public String challenger;

        public String defender;
    }

    public static class ChallengeSettledEventResponse extends BaseEventResponse {
        public BigInteger challengeId;

        public String winner;

        public String loser;

        public Boolean bothWin;
    }

    public static class ClaimSettledEventResponse extends BaseEventResponse {
        public byte[] claimId;

        public BigInteger finnalState;
    }

    public static class NewClaimEventResponse extends BaseEventResponse {
        public byte[] claimId;

        public BigInteger chainId;

        public BigInteger height;

        public byte[] hashVal;
    }

    public static class NewInvolvedEventResponse extends BaseEventResponse {
        public String addr;

        public byte[] claimId;

        public BigInteger identity;
    }
}
