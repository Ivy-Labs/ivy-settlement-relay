package org.ivy.settlement.relay.watchdog.contract;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.*;
import org.web3j.abi.datatypes.reflection.Parameterized;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.11.1.
 */
@SuppressWarnings("rawtypes")
public class ChallengeManager extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_MAX_CHALLENGE_DEGREE = "MAX_CHALLENGE_DEGREE";

    public static final String FUNC_BISECTSEGMENT = "bisectSegment";

    public static final String FUNC_CHALLENGEDISPUTE = "challengeDispute";

    public static final String FUNC_CHALLENGES = "challenges";

    public static final String FUNC_CHOOSESEGMENT = "chooseSegment";

    public static final String FUNC_CREATECHALLENGE = "createChallenge";

    public static final String FUNC_CURRENTRESPONDER = "currentResponder";

    public static final String FUNC_GETCHALLENGE = "getChallenge";

    public static final String FUNC_ISTIMEOUT = "isTimeout";

    public static final String FUNC_PUBLISHDISPUTES = "publishDisputes";

    public static final String FUNC_PUBLISHDISPUTES2 = "publishDisputes2";

    public static final String FUNC_TIMEOUT = "timeout";

    public static final String FUNC_TOTALCHALLENGECREATED = "totalChallengeCreated";

    public static final Event CHALLENGEENDED_EVENT = new Event("ChallengeEnded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>(true) {}));
    ;

    public static final Event PUBLISHED_EVENT = new Event("Published", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>(true) {}, new TypeReference<Uint64>(true) {}, new TypeReference<Uint32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Dispute>() {}));
    ;

    @Deprecated
    protected ChallengeManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ChallengeManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ChallengeManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ChallengeManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ChallengeEndedEventResponse> getChallengeEndedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CHALLENGEENDED_EVENT, transactionReceipt);
        ArrayList<ChallengeEndedEventResponse> responses = new ArrayList<ChallengeEndedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ChallengeEndedEventResponse typedResponse = new ChallengeEndedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.challengeIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ChallengeEndedEventResponse getChallengeEndedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CHALLENGEENDED_EVENT, log);
        ChallengeEndedEventResponse typedResponse = new ChallengeEndedEventResponse();
        typedResponse.log = log;
        typedResponse.challengeIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ChallengeEndedEventResponse> challengeEndedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getChallengeEndedEventFromLog(log));
    }

    public Flowable<ChallengeEndedEventResponse> challengeEndedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGEENDED_EVENT));
        return challengeEndedEventFlowable(filter);
    }

    public static List<PublishedEventResponse> getPublishedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PUBLISHED_EVENT, transactionReceipt);
        ArrayList<PublishedEventResponse> responses = new ArrayList<PublishedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PublishedEventResponse typedResponse = new PublishedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.challengeIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.challengeSeq = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.step = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.reactor = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.deadline = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.dispute = (Dispute) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PublishedEventResponse getPublishedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PUBLISHED_EVENT, log);
        PublishedEventResponse typedResponse = new PublishedEventResponse();
        typedResponse.log = log;
        typedResponse.challengeIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.challengeSeq = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.step = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.reactor = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.deadline = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.dispute = (Dispute) eventValues.getNonIndexedValues().get(3);
        return typedResponse;
    }

    public Flowable<PublishedEventResponse> publishedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPublishedEventFromLog(log));
    }

    public Flowable<PublishedEventResponse> publishedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PUBLISHED_EVENT));
        return publishedEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> MAX_CHALLENGE_DEGREE() {
        final Function function = new Function(FUNC_MAX_CHALLENGE_DEGREE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> bisectSegment(BigInteger challengeIndex, ChallState oldState, List<byte[]> newSegments) {
        final Function function = new Function(
                FUNC_BISECTSEGMENT, 
                Arrays.<Type>asList(new Uint64(challengeIndex),
                oldState, 
                new DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.web3j.abi.Utils.typeMap(newSegments, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> challengeDispute(BigInteger challengeIndex, BigInteger disputeIndex, ChallState oldState, List<byte[]> datas) {
        final Function function = new Function(
                FUNC_CHALLENGEDISPUTE, 
                Arrays.<Type>asList(new Uint64(challengeIndex),
                new Uint32(disputeIndex),
                oldState, 
                new DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(datas, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple8<BigInteger, BigInteger, Player, Player, BigInteger, String, BigInteger, byte[]>> challenges(BigInteger param0) {
        final Function function = new Function(FUNC_CHALLENGES, 
                Arrays.<Type>asList(new Uint64(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}, new TypeReference<Uint32>() {}, new TypeReference<Player>() {}, new TypeReference<Player>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, BigInteger, Player, Player, BigInteger, String, BigInteger, byte[]>>(function,
                new Callable<Tuple8<BigInteger, BigInteger, Player, Player, BigInteger, String, BigInteger, byte[]>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, Player, Player, BigInteger, String, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, BigInteger, Player, Player, BigInteger, String, BigInteger, byte[]>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Player) results.get(2), 
                                (Player) results.get(3), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (byte[]) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> chooseSegment(BigInteger challengeIndex, BigInteger claimPosition, ChallState oldState) {
        final Function function = new Function(
                FUNC_CHOOSESEGMENT, 
                Arrays.<Type>asList(new Uint64(challengeIndex),
                new Uint64(claimPosition),
                oldState), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static class Segment implements Type {

        @Override
        public Object getValue() {
            return null;
        }

        @Override
        public String getTypeAsString() {
            return null;
        }
    }

    public RemoteFunctionCall<TransactionReceipt> createChallenge(BigInteger chainId, List<String> participants, String settleAddress, List<Segment> segments) {
        final Function function = new Function(
                FUNC_CREATECHALLENGE, 
                Arrays.<Type>asList(new Uint16(chainId),
                new org.web3j.abi.datatypes.generated.StaticArray2<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(participants, Address.class)),
                new Address(160, settleAddress),
                new org.web3j.abi.datatypes.generated.StaticArray2<Segment>(
                        Segment.class,
                        org.web3j.abi.Utils.typeMap(segments, Segment.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> currentResponder(BigInteger challengeIndex) {
        final Function function = new Function(FUNC_CURRENTRESPONDER, 
                Arrays.<Type>asList(new Uint64(challengeIndex)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Challenge> getChallenge(BigInteger challengeIndex) {
        final Function function = new Function(FUNC_GETCHALLENGE, 
                Arrays.<Type>asList(new Uint64(challengeIndex)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Challenge>() {}));
        return executeRemoteCallSingleValueReturn(function, Challenge.class);
    }

    public RemoteFunctionCall<Boolean> isTimeout(BigInteger challengeIndex) {
        final Function function = new Function(FUNC_ISTIMEOUT, 
                Arrays.<Type>asList(new Uint64(challengeIndex)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> publishDisputes(BigInteger challengeIndex, ChallState oldState, List<byte[]> publish, byte[] proof) {
        final Function function = new Function(
                FUNC_PUBLISHDISPUTES, 
                Arrays.<Type>asList(new Uint64(challengeIndex),
                oldState, 
                new DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(publish, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(proof)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> publishDisputes2(BigInteger challengeIndex, ChallState oldState, List<byte[]> publish, byte[] proof) {
        final Function function = new Function(
                FUNC_PUBLISHDISPUTES2, 
                Arrays.<Type>asList(new Uint64(challengeIndex),
                oldState, 
                new DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(publish, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(proof)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> timeout(BigInteger challengeIndex) {
        final Function function = new Function(
                FUNC_TIMEOUT, 
                Arrays.<Type>asList(new Uint64(challengeIndex)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalChallengeCreated() {
        final Function function = new Function(FUNC_TOTALCHALLENGECREATED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static ChallengeManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ChallengeManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ChallengeManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ChallengeManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ChallengeManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ChallengeManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ChallengeManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ChallengeManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ChallengeManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String chainManagerAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, chainManagerAddr)));
        return deployRemoteCall(ChallengeManager.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<ChallengeManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String chainManagerAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, chainManagerAddr)));
        return deployRemoteCall(ChallengeManager.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ChallengeManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String chainManagerAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, chainManagerAddr)));
        return deployRemoteCall(ChallengeManager.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ChallengeManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String chainManagerAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, chainManagerAddr)));
        return deployRemoteCall(ChallengeManager.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Dispute extends DynamicStruct {
        public BigInteger chainId;

        public BigInteger challengeStart;

        public BigInteger challengeEnd;

        public List<byte[]> headerStates;

        public byte[] extra;

        public Dispute(BigInteger chainId, BigInteger challengeStart, BigInteger challengeEnd, List<byte[]> headerStates, byte[] extra) {
            super(new Uint16(chainId),
                    new Uint64(challengeStart),
                    new Uint64(challengeEnd),
                    new DynamicArray<Bytes32>(
                            Bytes32.class,
                            org.web3j.abi.Utils.typeMap(headerStates, Bytes32.class)),
                    new Bytes32(extra));
            this.chainId = chainId;
            this.challengeStart = challengeStart;
            this.challengeEnd = challengeEnd;
            this.headerStates = headerStates;
            this.extra = extra;
        }

        public Dispute(Uint16 chainId, Uint64 challengeStart, Uint64 challengeEnd, @Parameterized(type = Bytes32.class) DynamicArray<Bytes32> headerStates, Bytes32 extra) {
            super(chainId, challengeStart, challengeEnd, headerStates, extra);
            this.chainId = chainId.getValue();
            this.challengeStart = challengeStart.getValue();
            this.challengeEnd = challengeEnd.getValue();
            this.headerStates = headerStates.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.extra = extra.getValue();
        }
    }

    public static class ChallState extends DynamicStruct {
        public BigInteger chainId;

        public BigInteger seq;

        public BigInteger start;

        public BigInteger end;

        public List<byte[]> segments;

        public byte[] extra;

        public ChallState(BigInteger chainId, BigInteger seq, BigInteger start, BigInteger end, List<byte[]> segments, byte[] extra) {
            super(new Uint16(chainId),
                    new Uint64(seq),
                    new Uint64(start),
                    new Uint64(end),
                    new DynamicArray<Bytes32>(
                            Bytes32.class,
                            org.web3j.abi.Utils.typeMap(segments, Bytes32.class)),
                    new Bytes32(extra));
            this.chainId = chainId;
            this.seq = seq;
            this.start = start;
            this.end = end;
            this.segments = segments;
            this.extra = extra;
        }

        public ChallState(Uint16 chainId, Uint64 seq, Uint64 start, Uint64 end, @Parameterized(type = Bytes32.class) DynamicArray<Bytes32> segments, Bytes32 extra) {
            super(chainId, seq, start, end, segments, extra);
            this.chainId = chainId.getValue();
            this.seq = seq.getValue();
            this.start = start.getValue();
            this.end = end.getValue();
            this.segments = segments.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.extra = extra.getValue();
        }
    }

    public static class Player extends StaticStruct {
        public String addr;

        public BigInteger timeLeft;

        public Player(String addr, BigInteger timeLeft) {
            super(new Address(160, addr),
                    new Uint256(timeLeft));
            this.addr = addr;
            this.timeLeft = timeLeft;
        }

        public Player(Address addr, Uint256 timeLeft) {
            super(addr, timeLeft);
            this.addr = addr.getValue();
            this.timeLeft = timeLeft.getValue();
        }
    }

    public static class Challenge extends StaticStruct {
        public BigInteger chainId;

        public BigInteger step;

        public Player attester;

        public Player referee;

        public BigInteger responder;

        public String settleAddress;

        public BigInteger lastMoveTimestamp;

        public byte[] challengeState;

        public Challenge(BigInteger chainId, BigInteger step, Player attester, Player referee, BigInteger responder, String settleAddress, BigInteger lastMoveTimestamp, byte[] challengeState) {
            super(new Uint16(chainId),
                    new Uint32(step),
                    attester, 
                    referee, 
                    new Uint8(responder),
                    new Address(160, settleAddress),
                    new Uint256(lastMoveTimestamp),
                    new Bytes32(challengeState));
            this.chainId = chainId;
            this.step = step;
            this.attester = attester;
            this.referee = referee;
            this.responder = responder;
            this.settleAddress = settleAddress;
            this.lastMoveTimestamp = lastMoveTimestamp;
            this.challengeState = challengeState;
        }

        public Challenge(Uint16 chainId, Uint32 step, Player attester, Player referee, Uint8 responder, Address settleAddress, Uint256 lastMoveTimestamp, Bytes32 challengeState) {
            super(chainId, step, attester, referee, responder, settleAddress, lastMoveTimestamp, challengeState);
            this.chainId = chainId.getValue();
            this.step = step.getValue();
            this.attester = attester;
            this.referee = referee;
            this.responder = responder.getValue();
            this.settleAddress = settleAddress.getValue();
            this.lastMoveTimestamp = lastMoveTimestamp.getValue();
            this.challengeState = challengeState.getValue();
        }
    }

    public static class ChallengeEndedEventResponse extends BaseEventResponse {
        public BigInteger challengeIndex;
    }

    public static class PublishedEventResponse extends BaseEventResponse {
        public BigInteger challengeIndex;

        public BigInteger challengeSeq;

        public BigInteger step;

        public String reactor;

        public BigInteger deadline;

        public Dispute dispute;
    }
}
