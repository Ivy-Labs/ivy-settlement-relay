package org.ivy.settlement.relay.watchdog.contract;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.*;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.11.1.
 */
@SuppressWarnings("rawtypes")
public class SafetyManager extends Contract {
    public static final String BINARY = "60e060405234801561000f575f80fd5b50604051613d6c380380613d6c83398101604081905261002e91610066565b6001600160a01b0392831660805290821660a0521660c0526100a6565b80516001600160a01b0381168114610061575f80fd5b919050565b5f805f60608486031215610078575f80fd5b6100818461004b565b925061008f6020850161004b565b915061009d6040850161004b565b90509250925092565b60805160a05160c051613c336101395f395f818161032a01528181610ff301526127aa01525f81816103dd0152610ccf01525f81816102770152818161048101528181610eb7015281816113b901528181611543015281816117d40152818161192701528181611b8e01528181611e4b01528181612393015281816124d4015281816127880152612eed0152613c335ff3fe60806040526004361061008f575f3560e01c80638fc61e81116100575780638fc61e8114610146578063a41f6ab314610165578063c48b8f9914610178578063ce4a89cf1461018b578063d70561f1146101aa575f80fd5b80633b4ee906146100935780633f5d3e0b146100b45780635e2d9ce3146100d35780636ca99da5146100f257806373df161214610111575b5f80fd5b34801561009e575f80fd5b506100b26100ad36600461313e565b6101c9565b005b3480156100bf575f80fd5b506100b26100ce36600461318d565b6103d2565b3480156100de575f80fd5b506100b26100ed3660046131fc565b61045c565b3480156100fd575f80fd5b506100b261010c366004613250565b610e65565b34801561011c575f80fd5b5061013061012b36600461313e565b6113b6565b60405160ff909116815260200160405180910390f35b348015610151575f80fd5b506100b2610160366004613267565b6114da565b6100b26101733660046132c3565b611751565b6100b2610186366004613324565b6118fc565b348015610196575f80fd5b506100b26101a5366004613351565b611924565b3480156101b5575f80fd5b506100b26101c43660046133a6565b611b8c565b5f8281526020819052604090205460ff1660021480156101f557506101ee82336113b6565b60ff166001145b61023d5760405162461bcd60e51b815260206004820152601460248201527310d85b9b9bdd0814d95d1d1b194814995dd85c9960621b60448201526064015b60405180910390fd5b5f8281526001602081815260408084203385529091529091205460ff169003610382576040516317b4d5b960e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bda6adc8906102b490600290339081906064906004016133df565b6020604051808303815f875af11580156102d0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102f4919061340c565b505f8281526001602090815260408083203393849052909152516329a900b760e11b815260048101919091526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635352016e906024015f604051808303815f87803b15801561036b575f80fd5b505af115801561037d573d5f803e3d5ffd5b505050505b5f8281526003602090815260408083203384529091528082205490516001600160a01b0384169282156108fc02929190818181858888f193505050501580156103cd573d5f803e3d5ffd5b505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461044a5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79204368616c6c656e67654d616e616765722043616e204163636573736044820152606401610234565b61045684848484611d1f565b50505050565b604080516080810182525f8082526020820181905291810182905260608101919091527f0000000000000000000000000000000000000000000000000000000000000000905f8581526020819052604090205460ff166001146104f15760405162461bcd60e51b815260206004820152600d60248201526c15d85c88139bdd08115e1a5cdd609a1b6044820152606401610234565b8481525f85815260016020908152604080832033845290915290205460ff161580159061054057505f8581526001602090815260408083206001600160a01b038816845290915290205460ff16155b15610649576040516348bcbd2d60e01b8152600481018690526001600160a01b0385811660248301528316906348bcbd2d90604401602060405180830381865afa158015610590573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105b49190613423565b806105e357506105c660146002613452565b5f868152602081905260409020600101546105e19043613469565b115b61062f5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f742052657175657374204368616c6c656e676500000000000000006044820152606401610234565b3360408201526001600160a01b03841660208201526106ef565b5f8581526001602090815260408083206001600160a01b038816845290915290205460ff161580159061069557505f85815260016020908152604080832033845290915290205460ff16155b156106b4576001600160a01b03841660408201523360208201526106ef565b60405162461bcd60e51b815260206004820152601060248201526f57726f6e6720496e766f6c6f7665727360801b6044820152606401610234565b5f8581526002602090815260408083206001600160a01b038816845290915290205460ff1615801561072d575061072685856113b6565b60ff166003145b15610748576107418585836020015161228c565b5050505050565b61075285336113b6565b60ff166001141580610771575061076985856113b6565b60ff16600114155b156107ac5760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720537461746560a81b6044820152606401610234565b604080516060810182525f80825260208201819052918101919091525f836001600160a01b0316632d5e3f056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610805573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610829919061348c565b5f888152600160208181526040808420888201516001600160a01b039081168652925292839020909101549151631091ef6b60e11b815261010090920461ffff16600483015291925090821690632123ded690602401602060405180830381865afa15801561089a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108be9190613423565b6108fc5760405162461bcd60e51b815260206004820152600f60248201526e556e6368616c6c656e676561626c6560881b6044820152606401610234565b843515610a71576001600160a01b0381166394e208ee863561092160208901896134a7565b6040518463ffffffff1660e01b815260040161093f93929190613518565b606060405180830381865afa15801561095a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061097e91906135dc565b6040516384e4232760e01b8152863560048201529092506001600160a01b038516906384e4232790602401602060405180830381865afa1580156109c4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109e89190613423565b8015610a27575081515f888152600160208181526040808420888201516001600160a01b031685529091529091200154610100900461ffff9081169116145b610a6c5760405162461bcd60e51b81526020600482015260166024820152752bb937b7339021b7b6b6b4ba3a32b2102432b0b232b960511b6044820152606401610234565b610b34565b5f87815260016020818152604080842087820180516001600160a01b0390811687528285528387208601548e8852868652915181168752919093529381902090920154915163138b16d560e01b815261010090910461ffff16600482015263010000009091046001600160401b031660248201529082169063138b16d590604401606060405180830381865afa158015610b0d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b3191906135dc565b91505b506040805180820182525f808252602091820181905282518084018452818152820181905282518084018452848301516001600160401b0390811682528585015182850152845180860186528b8452600180865286852089880180516001600160a01b0390811688528289528988208401546301000000900490951684528e87529187529051909216845290845293909120600201549183019190915290610bda613109565b5f898152600160208181526040808420898201516001600160a01b03168552909152822081015460ff1690811115610c1457610c14613644565b03610c465750604080518082018252908501516001600160a01b03908116825260208087015190911690820152610c8a565b604051806040016040528086602001516001600160a01b03166001600160a01b0316815260200186604001516001600160a01b03166001600160a01b031681525090505b5f8981526001602081815260408084206001600160a01b038d811686529083528185209093015481518083018352888152928301879052905163044b730360e41b81527f0000000000000000000000000000000000000000000000000000000000000000909316926344b7303092610d1292610100900461ffff169187913091600401613658565b6020604051808303815f875af1158015610d2e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d5291906136ec565b9050610d648a87604001516002612337565b50610d758a87602001516002612337565b506001606087018181526001600160401b0383165f908152600460209081526040918290208a518155908a015193810180546001600160a01b038087166001600160a01b031990921691909117909155828b015160029092018054945160ff16600160a01b026001600160a81b03199095169183169190911793909317909255517fb075ab568383a14852898f5383657c42b48a57a4ae7505a7850922d0ef4e618792610e51928e928692909384526001600160401b039290921660208401526001600160a01b03908116604084015216606082015260800190565b60405180910390a150505050505050505050565b5f8181526020819052604090205460ff16600114610eb45760405162461bcd60e51b815260206004820152600c60248201526b2bb0b9102737ba1027b832b760a11b6044820152606401610234565b5f7f000000000000000000000000000000000000000000000000000000000000000090505f816001600160a01b0316632d5e3f056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f15573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f39919061348c565b60405163ada5ab8360e01b8152600481018590529091506001600160a01b0382169063ada5ab8390602401602060405180830381865afa158015610f7f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fa39190613423565b15610ff05760405162461bcd60e51b815260206004820152601c60248201527f49767920426c6f636b205374696c6c204368616c6c656e6761626c65000000006044820152606401610234565b5f7f000000000000000000000000000000000000000000000000000000000000000090505f836001600160a01b0316633a4c79426040518163ffffffff1660e01b8152600401602060405180830381865afa158015611051573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611075919061348c565b5f868152602081905260408082206001015490516202cb0d60eb1b81526004810191909152919250906001600160a01b03861690631658680090602401602060405180830381865afa1580156110cd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110f1919061340c565b5f878152602081905260409020549091506111229063ffffffff650100000000008204811691610100900416613707565b5f87815260208190526040902054600160481b900463ffffffff908116911614806112c857505f8681526020819052604090819020549051632ac52d9560e01b81526004810183905261010090910463ffffffff16906001600160a01b03841690632ac52d9590602401602060405180830381865afa1580156111a7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111cb919061340c565b6040516202cb0d60eb1b81524360048201526001600160a01b038086169163f140b332918a1690631658680090602401602060405180830381865afa158015611216573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061123a919061340c565b6040518263ffffffff1660e01b815260040161125891815260200190565b602060405180830381865afa158015611273573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611297919061340c565b6112a19190613469565b6112ab9190613469565b5f87815260208190526040902054600160681b900463ffffffff16145b6113085760405162461bcd60e51b815260206004820152601160248201527021b0b73737ba1029b2ba3a3632902bb0b960791b6044820152606401610234565b5f8681526020819052604090819020805460ff19166002179055516340ca247760e11b8152600481018290526001600160a01b0384169063819448ee906024015f604051808303815f87803b15801561135f575f80fd5b505af1158015611371573d5f803e3d5ffd5b505050507f93cd182dab9c6dc2d2a8acc1c85d15558f51141d4bd0d60cd867bffb047fbc61866040516113a691815260200190565b60405180910390a1505050505050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633a4c79426040518163ffffffff1660e01b8152600401602060405180830381865afa158015611413573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611437919061348c565b60405163229bb82360e01b81526001600160a01b038481166004830152919091169063229bb82390602401602060405180830381865afa15801561147d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114a19190613723565b90508060ff165f036114d457505f8281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6001600160401b0382165f90815260046020818152604080842081516080810183528154815260018201546001600160a01b039081168286015260029092015480831682850152600160a01b900460ff1660608201528251632d5e3f0560e01b815292519095947f000000000000000000000000000000000000000000000000000000000000000090921693632d5e3f059380840193919291908290030181865afa15801561158b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115af919061348c565b6001600160a01b03166394e208ee84356115cc60208701876134a7565b6040518463ffffffff1660e01b81526004016115ea93929190613518565b606060405180830381865afa158015611605573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061162991906135dc565b8251909150833511801590611678575081515f908152600160208181526040808420818701516001600160a01b0316855290915290912081015460ff168181111561167657611676613644565b145b80156116b9575081515f908152600160208181526040808420818701516001600160a01b031685529091529091200154815161ffff90811661010090920416145b8015611702575081515f908152600160208181526040808420818701516001600160a01b0316855282529092200154908201516001600160401b03908116630100000090920416145b61173d5760405162461bcd60e51b815260206004820152600c60248201526b10dad958dac811985a5b195960a21b6044820152606401610234565b61045684836020015184604001515f611d1f565b5f6117648461175f85613769565b6124b4565b905080602001516001600160401b0316825f01602081019061178691906137f2565b6001600160401b0316106117d25760405162461bcd60e51b815260206004820152601360248201527215dc9bdb99c8131858dad9590812195a59da1d606a1b6044820152606401610234565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632d5e3f056040518163ffffffff1660e01b8152600401602060405180830381865afa15801561182e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611852919061348c565b6001600160a01b031663a662e0a5825f0151846020013585806040019061187991906134a7565b6040518563ffffffff1660e01b8152600401611898949392919061380d565b5f60405180830381865afa1580156118b2573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526118d99190810190613887565b5080516104569085906001906118f260208701876137f2565b8660200135612778565b5f61190a8361175f84613769565b90506103cd835f835f015184602001518560400151612778565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632d5e3f056040518163ffffffff1660e01b8152600401602060405180830381865afa158015611981573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119a5919061348c565b90505f6001600160a01b0382166394e208ee85356119c660208801886134a7565b6040518463ffffffff1660e01b81526004016119e493929190613518565b606060405180830381865afa1580156119ff573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a2391906135dc565b90505f6001600160a01b0383166394e208ee8535611a4460208801886134a7565b6040518463ffffffff1660e01b8152600401611a6293929190613518565b606060405180830381865afa158015611a7d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611aa191906135dc565b905084358610801590611ab5575083358535105b8015611aca57508051825161ffff9081169116145b8015611af0575080602001516001600160401b031682602001516001600160401b031610155b611b2b5760405162461bcd60e51b815260206004820152600c60248201526b10da1958dac811985a5b195960a21b6044820152606401610234565b5f611b3587612ed4565b602080850151908401516040519293507fbe903560516224799b4f6285ef036600a7482e04ef9fbda0ea136f7d8e97e39e92611b7b928b928b35928b35919088906139b7565b60405180910390a150505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632d5e3f056040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c0c919061348c565b6001600160a01b0316635a5a540e82356040840135611c2e60208601866134a7565b6040518563ffffffff1660e01b8152600401611c4d9493929190613a05565b602060405180830381865afa158015611c68573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c8c9190613423565b158015611c9a575080358210155b611cd55760405162461bcd60e51b815260206004820152600c60248201526b10da1958dac811985a5b195960a21b6044820152606401610234565b5f611cdf83612ed4565b90507f769e062b12b6b20457337d7ecbfdc4dbb4d07b8c4a93324b326290e4e3f53f988382604051611d12929190613a24565b60405180910390a1505050565b6001600160401b0384165f90815260046020526040902060020154600160a01b900460ff16600114611d8b5760405162461bcd60e51b815260206004820152601560248201527457726f6e67204368616c6c656e676520537461746560581b6044820152606401610234565b6001600160401b0384165f90815260046020526040902054611dad81856113b6565b60ff166002148015611dcb5750611dc481846113b6565b60ff166002145b8015611df957505f8181526002602090815260408083206001600160a01b038716845290915290205460ff16155b611e385760405162461bcd60e51b815260206004820152601060248201526f57726f6e67204e6f646520537461746560801b6044820152606401610234565b6001600160401b0385165f5260046020527f00000000000000000000000000000000000000000000000000000000000000008215612132576001600160401b0386165f908152600460205260409020600190810154611ea29184916001600160a01b031690612337565b505f8281526001602090815260408083206001600160401b038a1684526004808452828520600201546001600160a01b0316855292529091205460ff169081900361200e57816001600160a01b0316633a4c79426040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f23573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f47919061348c565b6001600160401b0388165f908152600460208190526040918290206002015491516338510b8160e01b81526001600160a01b0392831691810191909152600160248201529116906338510b81906044015f604051808303815f87803b158015611fae575f80fd5b505af1158015611fc0573d5f803e3d5ffd5b5050505f8481526020819052604090208054610100900463ffffffff1691506001611fea83613a44565b91906101000a81548163ffffffff021916908363ffffffff160217905550506120ed565b6001600160401b0387165f9081526004602081905260409182902060029081015492516317b4d5b960e31b81526001600160a01b038087169463bda6adc894612062949391909216918291606491016133df565b6020604051808303815f875af115801561207e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120a2919061340c565b505f838152602081905260409020805465010000000000900463ffffffff169060056120cd83613a44565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b505f8281526001602090815260408083206001600160401b038a16845260048352818420600201546001600160a01b031684529091529020805460ff19169055612231565b61213e82866001612337565b505f61214c83866003612337565b90505f826001600160a01b031663bda6adc883888a60326040518563ffffffff1660e01b815260040161218294939291906133df565b6020604051808303815f875af115801561219e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121c2919061340c565b5f8581526003602090815260408083206001600160a01b038c1684529091528120805492935083929091906121f8908490613a62565b90915550506001600160401b0388165f9081526004602052604090206001015461222e90859088906001600160a01b031661228c565b50505b604080516001600160401b03881681526001600160a01b03808816602083015286169181019190915283151560608201527f4502f7254c6e0374b699285f6d661f136947eeccf6ce7734753f1c4221cd1b1d906080016113a6565b5f8381526002602090815260408083206001600160a01b03808716808652919093529220805460ff191660011790558216900361230f575f8381526020819052604090208054600160681b900463ffffffff1690600d6122eb83613a75565b91906101000a81548163ffffffff021916908363ffffffff16021790555050505050565b5f8381526020819052604090208054600160481b900463ffffffff169060096122eb83613a75565b5f8381526001602090815260408083206001600160a01b038616845290915281205460ff16158061238c57505f8481526001602090815260408083206001600160a01b038716845290915290205460ff166004145b1561247b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633a4c79426040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ed573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612411919061348c565b6040516338510b8160e01b81526001600160a01b03858116600483015260ff8516602483015291909116906338510b81906044015f604051808303815f87803b15801561245c575f80fd5b505af115801561246e573d5f803e3d5ffd5b50505050600190506124ad565b505f8381526001602090815260408083206001600160a01b03861684529091529020805460ff191660ff831617905560025b9392505050565b604080516060810182525f808252602082018190529181019190915281517f0000000000000000000000000000000000000000000000000000000000000000908410156125435760405162461bcd60e51b815260206004820152601b60248201527f5461726765742043616e6e6f74204265204368616c6c656e67656400000000006044820152606401610234565b6040516348bcbd2d60e01b8152600481018590523360248201526001600160a01b038216906348bcbd2d90604401602060405180830381865afa15801561258c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125b09190613423565b156125f35760405162461bcd60e51b81526020600482015260136024820152725369676e65722043616e6e6f7420436c61696d60681b6044820152606401610234565b5f816001600160a01b0316632d5e3f056040518163ffffffff1660e01b8152600401602060405180830381865afa158015612630573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612654919061348c565b604051633574b47760e11b8152600481018790529091506001600160a01b03821690636ae968ee90602401602060405180830381865afa15801561269a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126be919061340c565b5f036126ff5760405162461bcd60e51b815260206004820152601060248201526f139bc814da59db995c9cc8119bdd5b9960821b6044820152606401610234565b83516020850151604051634a71047760e11b81526001600160a01b038416926394e208ee9261273092600401613a99565b606060405180830381865afa15801561274b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061276f91906135dc565b95945050505050565b5f858152602081905260408120547f0000000000000000000000000000000000000000000000000000000000000000917f00000000000000000000000000000000000000000000000000000000000000009160ff1690036129c4575f8781526020818152604091829020805460ff191660011790558151632d5e3f0560e01b815291516001600160a01b03851692632d5e3f059260048083019391928290030181865afa15801561282b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061284f919061348c565b6001600160a01b031663acebde24886040518263ffffffff1660e01b815260040161287c91815260200190565b602060405180830381865afa158015612897573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128bb919061340c565b5f8881526020819052604090819020600101829055516202cb0d60eb1b815260048101919091526001600160a01b0382811691637a02a01591851690631658680090602401602060405180830381865afa15801561291b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061293f919061340c565b6040518263ffffffff1660e01b815260040161295d91815260200190565b5f604051808303815f87803b158015612974575f80fd5b505af1158015612986573d5f803e3d5ffd5b505050507f67a61a6ec7fa2d28bb3a9d2f458c639d4717f81e9415ca5a97f1cf6ebec007a6876040516129bb91815260200190565b60405180910390a15b5f87815260016020908152604080832033845290915290205460ff1615612a2d5760405162461bcd60e51b815260206004820152601d60248201527f4368616c6c656e67657220416c726561647920526567697374657265640000006044820152606401610234565b612a3960146007613452565b5f88815260208190526040902060010154612a549043613469565b10612a915760405162461bcd60e51b815260206004820152600d60248201526c4f76657264756520436c61696d60981b6044820152606401610234565b6040518060400160405280600160ff1681526020016040518060800160405280896001811115612ac357612ac3613644565b815261ffff89166020808301919091526001600160401b0389166040808401919091526060909201889052919092525f8a8152600180835283822033835283529290208351815460ff90911660ff19918216178255918401518051828501805493959294909391928492909116908381811115612b4257612b42613644565b021790555060208281015182546040808601516001600160401b03166301000000026affffffffffffffff0000001961ffff90941661010002939093166affffffffffffffffffff0019909216919091179190911783556060909301516001909201919091558151631d263ca160e11b815291516001600160a01b0387169450633a4c794293506004808401938290030181865afa158015612be6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c0a919061348c565b60405163229bb82360e01b81523360048201526001600160a01b03919091169063229bb82390602401602060405180830381865afa158015612c4e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c729190613723565b60ff1615612d5057612c8660146002613452565b5f88815260208190526040902060010154612ca19043613469565b10612cdd5760405162461bcd60e51b815260206004820152600c60248201526b43616e6e6f7420436c61696d60a01b6044820152606401610234565b5f8781526020819052604090208054600191908290612d08908290610100900463ffffffff16613707565b825463ffffffff9182166101009390930a9283029190920219909116179055505f8781526001602090815260408083203384529091529020805460ff19166004179055612e9b565b6005341015612d985760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d0811195c1bdcda5d60621b6044820152606401610234565b5f878152602081905260409020805460019190600590612dc890849065010000000000900463ffffffff16613707565b825463ffffffff9182166101009390930a92830291909202199091161790555060405163d3fb3b4160e01b81523360048201526001600160a01b0382169063d3fb3b41906024015f604051808303815f87803b158015612e26575f80fd5b505af1158015612e38573d5f803e3d5ffd5b5050604051639f49c08760e01b815233600482015234602482018190526001600160a01b0386169350639f49c0879250906044015f604051808303818588803b158015612e83575f80fd5b505af1158015612e95573d5f803e3d5ffd5b50505050505b7fd0d86717b05c68ddf92d91b02d2caee59c2a33c7d9a455fa229e96a66993ed5a873388888888604051611b7b96959493929190613ad5565b604051632683235360e11b8152600481018290526060907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b03821690634d0646a6906024015f60405180830381865afa158015612f3b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052612f629190810190613b37565b91505f5b825181101561310257816001600160a01b0316633a4c79426040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fab573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612fcf919061348c565b6001600160a01b031663229bb823848381518110612fef57612fef613be9565b60200260200101516040518263ffffffff1660e01b815260040161302291906001600160a01b0391909116815260200190565b602060405180830381865afa15801561303d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906130619190613723565b60ff166001036130fa57816001600160a01b031663bda6adc8600185848151811061308e5761308e613be9565b60200260200101513360326040518563ffffffff1660e01b81526004016130b894939291906133df565b6020604051808303815f875af11580156130d4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906130f8919061340c565b505b600101612f66565b5050919050565b60405180604001604052806002906020820280368337509192915050565b6001600160a01b038116811461313b575f80fd5b50565b5f806040838503121561314f575f80fd5b82359150602083013561316181613127565b809150509250929050565b6001600160401b038116811461313b575f80fd5b801515811461313b575f80fd5b5f805f80608085870312156131a0575f80fd5b84356131ab8161316c565b935060208501356131bb81613127565b925060408501356131cb81613127565b915060608501356131db81613180565b939692955090935050565b5f604082840312156131f6575f80fd5b50919050565b5f805f6060848603121561320e575f80fd5b83359250602084013561322081613127565b915060408401356001600160401b0381111561323a575f80fd5b613246868287016131e6565b9150509250925092565b5f60208284031215613260575f80fd5b5035919050565b5f8060408385031215613278575f80fd5b82356132838161316c565b915060208301356001600160401b0381111561329d575f80fd5b6132a9858286016131e6565b9150509250929050565b5f606082840312156131f6575f80fd5b5f805f606084860312156132d5575f80fd5b8335925060208401356001600160401b038111156132f1575f80fd5b6132fd868287016131e6565b92505060408401356001600160401b03811115613318575f80fd5b613246868287016132b3565b5f8060408385031215613335575f80fd5b8235915060208301356001600160401b0381111561329d575f80fd5b5f805f60608486031215613363575f80fd5b8335925060208401356001600160401b0381111561337f575f80fd5b61338b868287016131e6565b92505060408401356001600160401b0381111561323a575f80fd5b5f80604083850312156133b7575f80fd5b8235915060208301356001600160401b038111156133d3575f80fd5b6132a9858286016132b3565b60ff94851681526001600160a01b0393841660208201529190921660408201529116606082015260800190565b5f6020828403121561341c575f80fd5b5051919050565b5f60208284031215613433575f80fd5b81516124ad81613180565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176114d4576114d461343e565b818103818111156114d4576114d461343e565b805161348781613127565b919050565b5f6020828403121561349c575f80fd5b81516124ad81613127565b5f808335601e198436030181126134bc575f80fd5b8301803591506001600160401b038211156134d5575f80fd5b6020019150368190038213156134e9575f80fd5b9250929050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b838152604060208201525f61276f6040830184866134f0565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b038111828210171561356757613567613531565b60405290565b60405161010081016001600160401b038111828210171561356757613567613531565b604051601f8201601f191681016001600160401b03811182821017156135b8576135b8613531565b604052919050565b805161ffff81168114613487575f80fd5b80516134878161316c565b5f60608284031280156135ed575f80fd5b50604051606081016001600160401b038111828210171561361057613610613531565b60405261361c836135c0565b8152602083015161362c8161316c565b60208201526040928301519281019290925250919050565b634e487b7160e01b5f52602160045260245ffd5b61ffff85168152610100810160208201855f5b60028110156136935781516001600160a01b031683526020928301929091019060010161366b565b5050506001600160a01b038416606083015260808201835f5b60028110156136e057815180516001600160401b0316845260209081015181850152604090930192909101906001016136ac565b50505095945050505050565b5f602082840312156136fc575f80fd5b81516124ad8161316c565b63ffffffff81811683821601908111156114d4576114d461343e565b5f60208284031215613733575f80fd5b815160ff811681146124ad575f80fd5b5f6001600160401b0382111561375b5761375b613531565b50601f01601f191660200190565b5f60408236031215613779575f80fd5b613781613545565b8235815260208301356001600160401b0381111561379d575f80fd5b830136601f8201126137ad575f80fd5b80356137c06137bb82613743565b613590565b8181523660208385010111156137d4575f80fd5b816020840160208301375f6020928201830152908301525092915050565b5f60208284031215613802575f80fd5b81356124ad8161316c565b61ffff85168152836020820152606060408201525f6138306060830184866134f0565b9695505050505050565b5f82601f830112613849575f80fd5b81516138576137bb82613743565b81815284602083860101111561386b575f80fd5b8160208501602083015e5f918101602001919091529392505050565b5f60208284031215613897575f80fd5b81516001600160401b038111156138ac575f80fd5b820161010081850312156138be575f80fd5b6138c661356d565b815181526138d6602083016135c0565b60208201526138e7604083016135c0565b60408201526138f8606083016135d1565b60608201526139096080830161347c565b608082015260a08201516001600160401b03811115613926575f80fd5b6139328682850161383a565b60a08301525060c0828101519082015260e08201516001600160401b0381111561395a575f80fd5b6139668682850161383a565b60e083015250949350505050565b5f8151808452602084019350602083015f5b828110156139ad5781516001600160a01b0316865260209586019590910190600101613986565b5093949350505050565b8681528560208201526001600160401b03851660408201528360608201526001600160401b038316608082015260c060a08201525f6139f960c0830184613974565b98975050505050505050565b848152836020820152606060408201525f6138306060830184866134f0565b828152604060208201525f613a3c6040830184613974565b949350505050565b5f63ffffffff821680613a5957613a5961343e565b5f190192915050565b808201808211156114d4576114d461343e565b5f63ffffffff821663ffffffff8103613a9057613a9061343e565b60010192915050565b828152604060208201525f82518060408401528060208501606085015e5f606082850101526060601f19601f8301168401019150509392505050565b8681526001600160a01b038616602082015260c0810160028610613b0757634e487b7160e01b5f52602160045260245ffd5b85604083015261ffff851660608301526001600160401b03841660808301528260a0830152979650505050505050565b5f60208284031215613b47575f80fd5b81516001600160401b03811115613b5c575f80fd5b8201601f81018413613b6c575f80fd5b80516001600160401b03811115613b8557613b85613531565b8060051b613b9560208201613590565b91825260208184018101929081019087841115613bb0575f80fd5b6020850194505b83851015613bde5784519250613bcc83613127565b82825260209485019490910190613bb7565b979650505050505050565b634e487b7160e01b5f52603260045260245ffdfea26469706673582212204ec217fe174072feef0ed9feeb19c6066eee1c4827e811514cf02453a56afebc64736f6c634300081a0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_CLAIMFAKEBLK = "claimFakeBlk";

    public static final String FUNC_CLAIMLACKEDBLK = "claimLackedBlk";

    public static final String FUNC_CLOSELACKEDBLKCHALLENGE = "closeLackedBlkChallenge";

    public static final String FUNC_GETSTATE = "getState";

    public static final String FUNC_REPORTFAULTYBLOCK = "reportFaultyBlock";

    public static final String FUNC_REPORTUNSORTEDBLOCK = "reportUnsortedBlock";

    public static final String FUNC_REQUESTCHALLENGE = "requestChallenge";

    public static final String FUNC_SETTLECHALLENGE = "settleChallenge";

    public static final String FUNC_SETTLEREWARD = "settleReward";

    public static final String FUNC_SETTLEWAR = "settleWar";

    public static final Event CHALLENGEREQUESTED_EVENT = new Event("ChallengeRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGESETTLED_EVENT = new Event("ChallengeSettled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event CHALLENGERCLAIMED_EVENT = new Event("ChallengerClaimed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event FAULTYBLOCKREPORTED_EVENT = new Event("FaultyBlockReported", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}));
    ;

    public static final Event UNSORTEDBLOCKREPORTED_EVENT = new Event("UnsortedBlockReported", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}));
    ;

    public static final Event WARCREATED_EVENT = new Event("WarCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event WARENDED_EVENT = new Event("WarEnded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected SafetyManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SafetyManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SafetyManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SafetyManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ChallengeRequestedEventResponse> getChallengeRequestedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CHALLENGEREQUESTED_EVENT, transactionReceipt);
        ArrayList<ChallengeRequestedEventResponse> responses = new ArrayList<ChallengeRequestedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ChallengeRequestedEventResponse typedResponse = new ChallengeRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.warHeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challengeIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.defender = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ChallengeRequestedEventResponse getChallengeRequestedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CHALLENGEREQUESTED_EVENT, log);
        ChallengeRequestedEventResponse typedResponse = new ChallengeRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.warHeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.challengeIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.defender = (String) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<ChallengeRequestedEventResponse> challengeRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getChallengeRequestedEventFromLog(log));
    }

    public Flowable<ChallengeRequestedEventResponse> challengeRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGEREQUESTED_EVENT));
        return challengeRequestedEventFlowable(filter);
    }

    public static List<ChallengeSettledEventResponse> getChallengeSettledEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CHALLENGESETTLED_EVENT, transactionReceipt);
        ArrayList<ChallengeSettledEventResponse> responses = new ArrayList<ChallengeSettledEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ChallengeSettledEventResponse typedResponse = new ChallengeSettledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.challengeIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.bothWin = (Boolean) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ChallengeSettledEventResponse getChallengeSettledEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CHALLENGESETTLED_EVENT, log);
        ChallengeSettledEventResponse typedResponse = new ChallengeSettledEventResponse();
        typedResponse.log = log;
        typedResponse.challengeIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.bothWin = (Boolean) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<ChallengeSettledEventResponse> challengeSettledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getChallengeSettledEventFromLog(log));
    }

    public Flowable<ChallengeSettledEventResponse> challengeSettledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESETTLED_EVENT));
        return challengeSettledEventFlowable(filter);
    }

    public static List<ChallengerClaimedEventResponse> getChallengerClaimedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CHALLENGERCLAIMED_EVENT, transactionReceipt);
        ArrayList<ChallengerClaimedEventResponse> responses = new ArrayList<ChallengerClaimedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ChallengerClaimedEventResponse typedResponse = new ChallengerClaimedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.warHeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.claimType = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.chainId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.height = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ChallengerClaimedEventResponse getChallengerClaimedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CHALLENGERCLAIMED_EVENT, log);
        ChallengerClaimedEventResponse typedResponse = new ChallengerClaimedEventResponse();
        typedResponse.log = log;
        typedResponse.warHeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.claimType = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.chainId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.height = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<ChallengerClaimedEventResponse> challengerClaimedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getChallengerClaimedEventFromLog(log));
    }

    public Flowable<ChallengerClaimedEventResponse> challengerClaimedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGERCLAIMED_EVENT));
        return challengerClaimedEventFlowable(filter);
    }

    public static List<FaultyBlockReportedEventResponse> getFaultyBlockReportedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(FAULTYBLOCKREPORTED_EVENT, transactionReceipt);
        ArrayList<FaultyBlockReportedEventResponse> responses = new ArrayList<FaultyBlockReportedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            FaultyBlockReportedEventResponse typedResponse = new FaultyBlockReportedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ivyHeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.signers = (List<String>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static FaultyBlockReportedEventResponse getFaultyBlockReportedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(FAULTYBLOCKREPORTED_EVENT, log);
        FaultyBlockReportedEventResponse typedResponse = new FaultyBlockReportedEventResponse();
        typedResponse.log = log;
        typedResponse.ivyHeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.signers = (List<String>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<FaultyBlockReportedEventResponse> faultyBlockReportedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getFaultyBlockReportedEventFromLog(log));
    }

    public Flowable<FaultyBlockReportedEventResponse> faultyBlockReportedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FAULTYBLOCKREPORTED_EVENT));
        return faultyBlockReportedEventFlowable(filter);
    }

    public static List<UnsortedBlockReportedEventResponse> getUnsortedBlockReportedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNSORTEDBLOCKREPORTED_EVENT, transactionReceipt);
        ArrayList<UnsortedBlockReportedEventResponse> responses = new ArrayList<UnsortedBlockReportedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnsortedBlockReportedEventResponse typedResponse = new UnsortedBlockReportedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.targetIvyHeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.lowerIvyHeight = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.lowerHeaderHeight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.higherIvyHeight = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.higherHeaderHeight = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.signers = (List<String>) ((Array) eventValues.getNonIndexedValues().get(5)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnsortedBlockReportedEventResponse getUnsortedBlockReportedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNSORTEDBLOCKREPORTED_EVENT, log);
        UnsortedBlockReportedEventResponse typedResponse = new UnsortedBlockReportedEventResponse();
        typedResponse.log = log;
        typedResponse.targetIvyHeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.lowerIvyHeight = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.lowerHeaderHeight = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.higherIvyHeight = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.higherHeaderHeight = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.signers = (List<String>) ((Array) eventValues.getNonIndexedValues().get(5)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<UnsortedBlockReportedEventResponse> unsortedBlockReportedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnsortedBlockReportedEventFromLog(log));
    }

    public Flowable<UnsortedBlockReportedEventResponse> unsortedBlockReportedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNSORTEDBLOCKREPORTED_EVENT));
        return unsortedBlockReportedEventFlowable(filter);
    }

    public static List<WarCreatedEventResponse> getWarCreatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WARCREATED_EVENT, transactionReceipt);
        ArrayList<WarCreatedEventResponse> responses = new ArrayList<WarCreatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WarCreatedEventResponse typedResponse = new WarCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.warHeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WarCreatedEventResponse getWarCreatedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WARCREATED_EVENT, log);
        WarCreatedEventResponse typedResponse = new WarCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.warHeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<WarCreatedEventResponse> warCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWarCreatedEventFromLog(log));
    }

    public Flowable<WarCreatedEventResponse> warCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WARCREATED_EVENT));
        return warCreatedEventFlowable(filter);
    }

    public static List<WarEndedEventResponse> getWarEndedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WARENDED_EVENT, transactionReceipt);
        ArrayList<WarEndedEventResponse> responses = new ArrayList<WarEndedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WarEndedEventResponse typedResponse = new WarEndedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.warheight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WarEndedEventResponse getWarEndedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WARENDED_EVENT, log);
        WarEndedEventResponse typedResponse = new WarEndedEventResponse();
        typedResponse.log = log;
        typedResponse.warheight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<WarEndedEventResponse> warEndedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWarEndedEventFromLog(log));
    }

    public Flowable<WarEndedEventResponse> warEndedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WARENDED_EVENT));
        return warEndedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> claimFakeBlk(BigInteger _warHeight, UploadedHeader _target, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_CLAIMFAKEBLK, 
                Arrays.<Type>asList(new Uint256(_warHeight),
                _target), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> claimLackedBlk(BigInteger _warHeight, UploadedHeader _target, LackedHeader _lacked, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_CLAIMLACKEDBLK, 
                Arrays.<Type>asList(new Uint256(_warHeight),
                _target, 
                _lacked), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> closeLackedBlkChallenge(BigInteger _challengeIndex, UploadedHeader _uploadedHeader) {
        final Function function = new Function(
                FUNC_CLOSELACKEDBLKCHALLENGE, 
                Arrays.<Type>asList(new Uint64(_challengeIndex),
                _uploadedHeader), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getState(BigInteger _warHeight, String _node) {
        final Function function = new Function(FUNC_GETSTATE, 
                Arrays.<Type>asList(new Uint256(_warHeight),
                new Address(160, _node)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> reportFaultyBlock(BigInteger _targetIvyHeight, IvyBlock _faultyBlock) {
        final Function function = new Function(
                FUNC_REPORTFAULTYBLOCK, 
                Arrays.<Type>asList(new Uint256(_targetIvyHeight),
                _faultyBlock), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reportUnsortedBlock(BigInteger _targetIvyHeight, UploadedHeader _lower, UploadedHeader _higher) {
        final Function function = new Function(
                FUNC_REPORTUNSORTEDBLOCK, 
                Arrays.<Type>asList(new Uint256(_targetIvyHeight),
                _lower, 
                _higher), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestChallenge(BigInteger _warHeight, String _againster, UploadedHeader _committed) {
        final Function function = new Function(
                FUNC_REQUESTCHALLENGE, 
                Arrays.<Type>asList(new Uint256(_warHeight),
                new Address(160, _againster),
                _committed), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> settleChallenge(BigInteger challengeIndex, String winner, String loser, Boolean bothWin) {
        final Function function = new Function(
                FUNC_SETTLECHALLENGE, 
                Arrays.<Type>asList(new Uint64(challengeIndex),
                new Address(160, winner),
                new Address(160, loser),
                new Bool(bothWin)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> settleReward(BigInteger _warHeight, String _to) {
        final Function function = new Function(
                FUNC_SETTLEREWARD, 
                Arrays.<Type>asList(new Uint256(_warHeight),
                new Address(160, _to)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> settleWar(BigInteger _warHeight) {
        final Function function = new Function(
                FUNC_SETTLEWAR, 
                Arrays.<Type>asList(new Uint256(_warHeight)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SafetyManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SafetyManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SafetyManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SafetyManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SafetyManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SafetyManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SafetyManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SafetyManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SafetyManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _networkManager, String _challengeManager, String _epochLock) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _networkManager),
                new Address(160, _challengeManager),
                new Address(160, _epochLock)));
        return deployRemoteCall(SafetyManager.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<SafetyManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _networkManager, String _challengeManager, String _epochLock) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _networkManager),
                new Address(160, _challengeManager),
                new Address(160, _epochLock)));
        return deployRemoteCall(SafetyManager.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SafetyManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _networkManager, String _challengeManager, String _epochLock) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _networkManager),
                new Address(160, _challengeManager),
                new Address(160, _epochLock)));
        return deployRemoteCall(SafetyManager.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SafetyManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _networkManager, String _challengeManager, String _epochLock) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _networkManager),
                new Address(160, _challengeManager),
                new Address(160, _epochLock)));
        return deployRemoteCall(SafetyManager.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class UploadedHeader extends DynamicStruct {
        public BigInteger ivyHeight;

        public byte[] proof;

        public UploadedHeader(BigInteger ivyHeight, byte[] proof) {
            super(new Uint256(ivyHeight),
                    new DynamicBytes(proof));
            this.ivyHeight = ivyHeight;
            this.proof = proof;
        }

        public UploadedHeader(Uint256 ivyHeight, DynamicBytes proof) {
            super(ivyHeight, proof);
            this.ivyHeight = ivyHeight.getValue();
            this.proof = proof.getValue();
        }
    }

    public static class LackedHeader extends DynamicStruct {
        public BigInteger height;

        public byte[] headerHash;

        public byte[] proof;

        public LackedHeader(BigInteger height, byte[] headerHash, byte[] proof) {
            super(new Uint64(height),
                    new Bytes32(headerHash),
                    new DynamicBytes(proof));
            this.height = height;
            this.headerHash = headerHash;
            this.proof = proof;
        }

        public LackedHeader(Uint64 height, Bytes32 headerHash, DynamicBytes proof) {
            super(height, headerHash, proof);
            this.height = height.getValue();
            this.headerHash = headerHash.getValue();
            this.proof = proof.getValue();
        }
    }

    public static class IvyBlock extends DynamicStruct {
        public BigInteger ivyHeight;

        public byte[] blockData;

        public byte[] combinedHash;

        public IvyBlock(BigInteger ivyHeight, byte[] blockData, byte[] combinedHash) {
            super(new Uint256(ivyHeight),
                    new DynamicBytes(blockData),
                    new Bytes32(combinedHash));
            this.ivyHeight = ivyHeight;
            this.blockData = blockData;
            this.combinedHash = combinedHash;
        }

        public IvyBlock(Uint256 ivyHeight, DynamicBytes blockData, Bytes32 combinedHash) {
            super(ivyHeight, blockData, combinedHash);
            this.ivyHeight = ivyHeight.getValue();
            this.blockData = blockData.getValue();
            this.combinedHash = combinedHash.getValue();
        }
    }

    public static class ChallengeRequestedEventResponse extends BaseEventResponse {
        public BigInteger warHeight;

        public BigInteger challengeIndex;

        public String challenger;

        public String defender;
    }

    public static class ChallengeSettledEventResponse extends BaseEventResponse {
        public BigInteger challengeIndex;

        public String winner;

        public String loser;

        public Boolean bothWin;
    }

    public static class ChallengerClaimedEventResponse extends BaseEventResponse {
        public BigInteger warHeight;

        public String challenger;

        public BigInteger claimType;

        public BigInteger chainId;

        public BigInteger height;

        public byte[] hash;
    }

    public static class FaultyBlockReportedEventResponse extends BaseEventResponse {
        public BigInteger ivyHeight;

        public BigInteger bridgeHeight;
        public String sender;

        public List<String> signers;
    }

    public static class UnsortedBlockReportedEventResponse extends BaseEventResponse {
        public BigInteger targetIvyHeight;
        public BigInteger bridgeHeight;
        public String sender;
        public BigInteger lowerIvyHeight;

        public BigInteger lowerHeaderHeight;

        public BigInteger higherIvyHeight;

        public BigInteger higherHeaderHeight;

        public List<String> signers;
    }

    public static class WarCreatedEventResponse extends BaseEventResponse {
        public BigInteger warHeight;
    }

    public static class WarEndedEventResponse extends BaseEventResponse {
        public BigInteger warheight;
    }
}
